# Primary key - a column or a group of columns used to identify a row uniquely in a table
# Foreign key - field or group of fields in a table that uniquely identifies a row in another table
# Constraints - rules enforced on data columns on table

# NOT NULL Constraint - Ensure that column cannot have NULL value
# UNIQUE Constraint - Ensure that all values in column are different

# CHECK Constraint - Ensure that all values in column satisfy certain conditions

# EXCLUSION Constraint - Ensures that if any two rows are compared on the specified column or expression using the specified operator, not all comparisons will return TRUE

# Full General Syntax when creating table

CREATE TABLE table_name (
column_name TYPE column_constraint,
column_name TYPE column_constraint,
table_constraint table_constraint
) INHERITS existing_table_name;

CREATE TABLE table_name(
column_name TYPE column_constraint,
column_name TYPE column_constraint,
);

# SERIAL - create sequence object and set the next value generated by the sequence as default value for column 

CREAT TABLE players(
player_id SERIAL PRIMARY KEY,
age TYPE column_constraint,);

CREATE TABLE account(
    user_id SERIAL PRIMARY KEY,
	username VARCHAR(50) UNIQUE NOT NULL,
	password VARCHAR(50) NOT NULL,
	email VARCHAR(250) UNIQUE NOT NULL,
	created_on TIMESTAMP NOT NULL,
	last_login TIMESTAMP 	
);

CREATE TABLE job(
job_id SERIAL PRIMARY KEY,
job_name VARCHAR(200) UNIQUE NOT NULL);

CREATE TABLE account_job(
user_id INTEGER REFERENCES account(user_id),
job_id INTEGER REFERENCES job(job_id),
hire_date TIMESTAMP
);

# INSERT allows to add rows into a table

INSERT INTO table(column1, column2, ...)
SELECT column1, column2, ...
FROM another_table
WHERE condition;

INSERT INTO account(username, password, email, create_on)
VALUES
('Jose', 'password', 'jose@mail.com', CURRENT_TIMESTAMP);

INSERT INTO job(job_name)
VALUES 
('Astronaut');

INSERT INTO job(job_name)
VALUES 
('President');

INSERT INTO account_job(user_id, job_id, hire_date)
VALUES 
(1, 1, CURRENT_TIMESTAMP);

INSERT INTO account_job(user_id, job_id, hire_date)
VALUES 
(1, 1, CURRENT_TIMESTAMP);

# UPDATE
UPDATE table
SET column1 = value1,
column2 = value2, ...
WHERE 
condition;

UPDATE account
SET last_login = CURRENT_timestamp
WHERE last_login IS NULL;

UPDATE account
SET last_login = CURRENT_TIMESTAMP;

# Delete clause
ELETE FROM table
USING tableB
WHERE tableA.id = TableB.id;

DELETE FROM job
WHERE job_name = 'Cowboy'
RETURNING job_id, job_name;

# Alter
ALTER TABLE table_name
ALTER COLUMN col_name
SET DEFAULT value

# DROP TABLE
ALTER TABLE new_info
DROP COLUMN IF EXISTS people;












