# PostgreSQL
# TIME-time, DATE-date, TIMESTAMP-data and time, TIMESTAMPTZ-date,time,timezone

SHOW TIMEZONE;

SELECT NOW();

SELECT TIMEOFDAY();

SELECT CURRENT_DATE;

# EXTRACT() - allows to extract sub-component of a date value

EXTRACT(YEAR FROM date_col);

AGE(date_col);

TO_CHAR(date_col, 'mm-dd-yyyy');

# return year part from payment_date column
SELECT EXTRACT(YEAR FROM payment_date) AS year FROM payment;

# return month
SELECT EXTRACT(MONTH FROM payment_date) FROM payment

# return quarter
SELECT EXTRACT(QUARTER FROM payment_date) FROM payment

# return age(from current date)
SELECT AGE(payment_date) FROM payment

# return data as certain character
SELECT TO_CHAR(payment_date, 'mon/dd/YYYY')
FROM payment

SELECT TO_CHAR(payment_date, 'MM-dd/YYYY')
FROM payment

#Link to formatting in PostgreSQL
https://www.postgresql.org/docs/12/functions-formatting.html

# Shows how many transactions were on Monday
SELECT COUNT(*) FROM payment
WHERE EXTRACT(dow FROM payment_date) = 1

# Mathematical Functions and Operations
http://www.postgresql.cn/docs/7.1/functions-math.html

SELECT ROUND(rental_rate/replacement_cost,2)*100 AS percent_cost
FROM film

# String Functions and Operators
https://www.postgresql.org/docs/9.1/functions-string.html

# Length of first name
SELECT LENGTH(first_name) FROM customer;

# concatenate first and last names (string concatenation)
SELECT first_name || ' ' || last_name as full_name
FROM customer;

SELECT upper(first_name) || ' ' || upper(last_name) as full_name
FROM customer;

SELECT first_name || last_name || '@gmail.com'
FROM customer

#grab first letter of first name to generate email address 
SELECT LEFT(first_name,1) || last_name || '@gmail.com'
FROM customer;

SELECT LOWER(LEFT(first_name,1)) || LOWER(last_name) || '@gmail.com'
FROM customer;

# Sub queries
# select students with grades higher than average
SELECT student, grade
FROM test_scores
WHERE grade > (SELECT AVG(grade) FROM test_scores);

SELECT student, grade FROM test_scores
WHERE student IN (SELECT student FROM honor_roll_table);

# General syntax
SELECT column_name
FROM table_name
WHERE EXISTS
(SELECT column_name FROM table_name WHERE condition);

# selecting rows with rental_rate bigger than the average value
SELECT title, rental_rate
FROM film
WHERE rental_rate>
(SELECT ROUND(AVG(rental_rate), 2) FROM film);

SELECT film_id, title
FROM film
WHERE film_id IN 
(SELECT inventory.film_id FROM rental
INNER JOIN inventory ON inventory.inventory_id = rental.inventory_id
WHERE rental_date BETWEEN '2005-05-29' AND '2005-05-30')
ORDER BY film_id;

SELECT first_name, last_name 
FROM customer AS c
WHERE EXISTS (SELECT * FROM payment as p
			 WHERE p.customer_id = c.customer_id
			 AND amount > 11);
       
# self-join is a query in which a table is joined to itself
# syntax
SELECT tableA.col, tableB.col
FROM table AS tableA
JOIN table AS tableB ON
tableA.some_col = tableB.other_col;

SELECT emp.name, report.name AS rep
FROM employees AS emp
JOIN employees AS report ON emp.emp_id = report.report_id;

SELECT f1.title, f2.title, f1.length FROM film AS f1
INNER JOIN film AS f2 ON 
f1.film_id != f2.film_id
AND f1.length = f2.length;
